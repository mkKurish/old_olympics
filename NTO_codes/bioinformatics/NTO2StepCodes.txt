#Задание "Форматирование мутаций"
def formating(row):
    if row[0] != '#':
        row = row.split()
        return('chr'+row[0]+':'+row[1]+' '+row[3]+'/'+row[4])
    else:
        return('False')

#Задание "Проверка качества праймеров"
def check_primer(primerSeq, minGC=50, maxGC=60, minPrimerLen=18, maxPrimerLen=25):
    primerSeq = primerSeq.lower()
    gc = (primerSeq.count('g') + primerSeq.count('c'))*100/len(primerSeq)
    lengthSeq = len(primerSeq)
    return (lengthSeq<=maxPrimerLen and lengthSeq>=minPrimerLen and
            gc<=maxGC and gc>=minGC)

#Задание "Поиск самокомплементарности"
def is_self_compliment(pSeq, maxNucNum):
    pSeq = pSeq.lower()
    if maxNucNum <= len(pSeq):
        cutSeq = pSeq[len(pSeq)-maxNucNum:]
    else:
        cutSeq = pSeq
    cutSeq = cutSeq.replace('a', 'T')
    cutSeq = cutSeq.replace('t', 'A')
    cutSeq = cutSeq.replace('g', 'C')
    cutSeq = cutSeq.replace('c', 'G')
    cutSeq = cutSeq.lower()
    cutSeq = cutSeq[::-1]
    return cutSeq in pSeq

#Задание "Температура плавления праймера"
def calculate_tm(pSeq):
    pSeq = pSeq.lower()
    w = pSeq.count('a')
    x = pSeq.count('t')
    y = pSeq.count('g')
    z = pSeq.count('c')
    return round(64.9 + 41 * (y + z - 16.4) / (w + x + y + z))